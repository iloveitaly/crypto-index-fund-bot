# Bot

* Staked balances do not show up anymore
  * might be fixed: https://github.com/binance-us/binance-us-api-docs/issues/107#issuecomment-1261877728
  * There is not a staking API on binance.us
  * The staked balances seems to be removed from the `get_account()` response
* Purchase more than the minimum
* Make sure MIN_NOTIONAL is respected when LIMIT strategy is used
* Refactor all binance stuff into a exchange-wrapped module
  * Market orders
  * Limit orders
* Offer a SME-based index?
  * https://taapi.io
  * Calculate on our own using klines and https://mrjbq7.github.io/ta-lib/
* Think about multiple exchanges to get more lower-value tokens in the index
  * Refactor binance-specific stuff out of the market_buy logic
  * Define minimum API requirements for a new exchange
  * Which exchange has the most tokens, reasonable fees, and mostly trustworthy?
* Play around with purchasing at different points in the order book when using a limit strategy
  * Inspect market depth to help determine the most realistic low price to purchase at

# System
* Conditionally load up rich depending on the env
* How will retries be handled by celery?

# Docker
* Move all scripts into a `scripts/` folder
* Install rust and support latest cryptography version

# CI / Python

* Python linter?
* Add cassettes for e22 tests
* cache poetry on github CI https://medium.com/@vanflymen/blazing-fast-ci-with-github-actions-poetry-black-and-pytest-9e74299dd4a5

# Ideas

* Can we use cointracker to get external portfolio data?
* Check prices across exchanges?
 https://marketplace.visualstudio.com/items?itemName=ms-python.isort

## Document Logger: Response

# https://stackoverflow.com/questions/16337511/log-all-requests-from-the-python-requests-module
logger = logging.getLogger("httplogger")
user.binance_client().session
session.hooks["response"].append(logRoundtrip)
def logRoundtrip(response, *args, **kwargs):
    extra = {"req": response.request, "res": response}
    logger.debug("HTTP roundtrip", extra=extra)

## Document Logger: Raw Stuff

def debug_requests_on():
    """Switches on logging of the requests module."""
    HTTPConnection.debuglevel = 2

    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)
    requests_log = logging.getLogger("requests.packages.urllib3")
    requests_log.setLevel(logging.DEBUG)
    requests_log.propagate = True


def debug_requests_off():
    """Switches off logging of the requests module, might be some side-effects"""
    HTTPConnection.debuglevel = 0

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.WARNING)
    root_logger.handlers = []
    requests_log = logging.getLogger("requests.packages.urllib3")
    requests_log.setLevel(logging.WARNING)
    requests_log.propagate = False


@contextlib.contextmanager
def debug_requests():
    """Use with 'with'!"""
    debug_requests_on()
    yield
    debug_requests_off()


